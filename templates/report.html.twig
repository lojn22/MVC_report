{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="two-col-layout">
            <aside class="aside">
                <div class="">
                    <h2> Innehåll</h2>
                        <ul>
                            <li><a href="#kmom01">kmom01</a></li>
                            <li><a href="#kmom02">kmom02</a></li>
                            <li><a href="#kmom03">kmom03</a></li>
                            <li><a href="#kmom04">kmom04</a></li>
                            <li><a href="#kmom05">kmom05</a></li>
                            <li><a href="#kmom05">kmom06</a></li>
                            <li><a href="#kmom05">kmom07</a></li>
                        </ul>
                </div>
            </aside>

        <main class="main">
            <h1>Report</h1>
            <h2 id="kmom01">Kmom01</h2>
                <p>
                Tidigare erfarenhet av objektorientering fick jag i kursen OOP som vi hade förra läsperioden.
                Där skapade vi olika klasser och objekt.
                Vi gick igenom lite hur klasserna kunde ärva från varandra och vilka relationer de kunde ha till varandra.
                </p>

                <p>
                En klass är som en mall för objekt där man utifrån klassen skapar objektet.
                För att jobba med objektet så kan man skapa metoder som ger objektet funktion.
                I ett objekt kan man ha en eller flera properties som även anger objektets värde.
                Man kan ha publika, skyddade och privata veriabler.
                Den kod man inte vill att användaren ska kunna ändra på gör man skyddad eller privat.
                För att kalla/anropa ett objekt använder man sig av veriabeln $this som pekar på objektets värde.
                Nyckelordet "new" måste man använda när man ska skapa en ny instans av en klass.
                </p>

                <p>
                Det kändes först lite överväldigande med alla mappar man skulle ha koll på, och vart alla filer man använder
                ligger. Tillsut så fick man någorlunda koll på strukturen. Vi har i tidigare kurser jobbat med andra ramverk 
                där man också använder sig av routes så det känndes inte helt främmande men det tar ändå ett tag in man kommer in 
                i rätt tänkande.
                </p>

                <p>
                Jag gick in på länken till artikeln "PHP The Right Way" och kollade i innehållsförteckningen för att se vad som kunde täkas
                vara intressant att läsa lite mer om.
                Jag hittade rubriken Templating och kollade närmre på det. 
                Hittade även länkar under Programming Paradigms som länkade till phps sida om objektorientering vilket var det som 
                känndes mest relavant och intressant att kunna läsa om från denna artikel. 
                Kan tänka mig att artikeln kan vara bra att ha till hands om man vill får lite mer information om hur vissa saker fungerar i PHP.
                </p>


                <p>
                Min TIL för detta kmom är att jag lärde mig lite mer om github. Hur man laddar upp det till Github och hur man taggar saker.
                </p>

            <h2 id="kmom02">Kmom02</h2>
                <p>
                Arv(inheritance) <br>
                Relation som man kallar "är en". En subklass ärver från en basklass/superklass/föräldrarklass. Vår subklass
                ska förlänga eller specialceras. En subklass ska kunna ersätta basklassen på alla ställen där den finns.
                Arv i PHP görs med nyckelordet extends. Alla publika och skyddade variabler och methoder i basklassen är synliga i subklassen.
                De privata variblerna i basklassen kommer man inte åt i subklassen. Vill man öppna upp det så får man göra det med skyddad veriabel.
                Man kan skriva över basklassens funktioner med nya. Man kan öppna upp de skyddade variablerna i subklasssen men man 
                kan inte göra det publika i bas privat i subklassen.<br>

                Scope Resolution Operator ::<br>
                Dubbla kolon ger tillgång till statiska, konstanter och överskrivna veriabler eller metoder av en klass.<br>

                Komposition(composition)<br>
                Relationen som man säger "har en, innehåller, använder sig av". En klass använder sig utav andra klasser. Om
                objektet inte kan finnas utan basobjektet så kallas det komposition.
                Aggregation är när ett objektet kan existera utan det ägda bas objektet.<br>

                OO preferences<br>
                Föredrar komposition över arv.<br>

                Kontrakt(interface)<br>
                Ett kotrakt på hur strukturen av en klass ska vara.
                Objekt interface tillåter oss att skapa en koddel som döpts till interface som visar vilka metoder som
                ska implenteras. Om en klass väljer att implemenetera ett interface så lovar den att alla metoder som finns i 
                interface ska uppfyllas. Alla metoder som man deklarera i interface är publika. Det är bara metoder som finns i ett 
                interface.<br>

                Trait<br>
                Återanvändbar koddel som är fristående. Man kan lägga till trait till klasser. Klasser lånar implemntationen från
                traits. Multiplet arv är när en subklass kan ärva från flera basklasser, det går inte i PHP därför använder man trait.
                </p>

                <p>
                Jag fick mycket hjälp av Marie för att lösa uppgiften. Jag försökte även kolla på hur piggame var
                uppbyggd för att försöka förstå hur jag skulle få fram kort och kortleken. Jag är väl nöjd med mina kod och mina klasser
                eftersom de fungerar men jag känner att jag saknar kunskapen för att kunna analysera vidare på om den hade kunnat 
                förbättras. Men jag tänker att ens kod kan väl alltid förbättras programeringsspråken verkar ju hela tiden utvecklas
                så då borde man kunna utveckla sin egen kod med. Det jag tänker på är att jag hade ju kunnat gjort en egen klass för vad
                man kan göra med kortleken istället för att ha allt i klassen DeckOfCards.
                </p>

                <p>
                    Min reflektion av att jobba med symfoni enligt MVC är att jag tycker det är lite många filer att hålla koll på som man ska jobba i,
                    men kan förstå konceptet att det ska vara mer strukturerat att arbeta enligt MVC där man sammlar alla router i en controller som
                    bestämmer vilken data som ska synas på hemsidan. Alla vyer skapas i olika templets för sig där man bestämmer hur en sida ska se ut.
                </p>

                <p>
                Min TIL för detta kmom är hur oop i php fungerar med arv och komposition.
                
                </p>

            <h2 id="kmom03">Kmom03</h2>
                <p>
                Efter att ha gjort flödesschemat känndes det lättare att arbeta fram hur man skulle skriva sin kod 
                för spelet. Känndes som om man fick bra koll på hur flödet i spelet skulle fungera. Ser nu i efterhand
                att jag hade kunnat utvecklat det lite mer med att lägga till ett utfall för spelaren där den får 21 och vinner.<br>
                <br>
                När man hade skrivit psuedokoden så fick man en överblick om vilka funktioner man kunde tänka sig att
                använda sig utav när man sedan skulle börja koda.<br>
                <br>
                Flödesschemaat var det verktyg som jag kände kan vara bra att ta med sig framöver. Det sammlar ens tankar och 
                det blir lättare att komma igång med tankearbetet och logiken i ens projekt.
                </p>

                <p>
                Till uppgiften skapade jag tre nya klasser. Jag skapade klassen Player som representerar en spelare i spelet
                som kan dra kort från en kortlek och ha en hand av kort. Bank klassen representerar banken i spelet och
                kan också dra kort. Banken drar kort sålänge summan är under 17 och sedan stannar den. Den sista klassen jag
                skapa är Game som tillhandarhåller logik till spelet. Här finns bl.a kontroller som kollar om spelaren eller banken
                har mer än 21 på sina händer, vem av spelaren som har närmast 21 och utser sedan vinnaren. Förutom de nya
                klasserna har jag använt mig utav de befintliga klasserna som CardHand som representera en han med kort och
                DeckOfCards som representerar en kortlek. Slutligen skapade jag en GameController med routes till de olika sidorna
                på webben som jag strukturerar upp i min twig filer.<br>
                <br>
                Jag är nöjd med min lösning för uppgiften. Min kod är väl strukturerad och uppdelad i olika moduler så det är enkelt
                att navigerar runt i när man jobbar med projektet.
                </p>

                <p>
                Det känns som om den inte vill läsa in min css kod ibland och därför känns det svårt att designa
                sidorna som man vill. Jag försöker med att rensa cachen eftersom det är det jag har kunnat läsa
                mig till att det kan hänga på och ibland känns det som det hjälper men ibland gör det ingen skillnad.
                </p>

                <p>
                Min TIL för detta kmom var att skapa ett flödesdiagram och skriva psuedokod.
                </p>

            <h2 id="kmom04">Kmom04</h2>
                <p></p>
            <h2 id="kmom05">Kmom05</h2>
                <p></p>
            <h2 id="kmom06">Kmom06</h2>
                <p></p>
            <h2 id="kmom07">Kmom07</h2>
                <p></p>
        </main>
    </div>
{% endblock %}